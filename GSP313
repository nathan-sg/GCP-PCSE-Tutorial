# Some Jooli, Inc. standards you should follow:

# Create all resources in the default region or zone, unless otherwise directed. The default region is REGION, and the default zone is ZONE.

# Naming normally uses the format team-resource; for example, an instance could be named nucleus-webserver1.  

# Make sure to create an instance template in global location.

# Allocate cost-effective resource sizes. Projects are monitored, and excessive resource use will result in the containing project's termination (and possibly yours), so plan carefully. This is the guidance the monitoring team is willing to share: unless directed, use e2-micro for small Linux VMs, and use e2-medium for Windows or other applications, such as Kubernetes nodes.

# Task 1. Create a project jumphost instance
# You will use this instance to perform maintenance for the project.

# Requirements:

# Name the instance Instance name.   I have choosen nucleus-jumphost 
# Create the instance in the ZONE zone.
# Use an e2-micro machine type.
# Use the default image type (Debian Linux).


# Initialise the environment variables you will use later 

student-02-6dbe2438f1f4@qwiklabs.net
wFuQ5OsK8iRz
qwiklabs-gcp-02-3aafc06d5001
nucleus-jumphost-601
allow-tcp-rule-191

export INSTANCE_NAME=nucleus-jumphost-601
export ZONE=us-west4-b
export REGION=us-west4
export PORT=80
export FIREWALL_NAME=allow-tcp-rule-191



/*

First, create the load balancer template:

Create a managed instance group based on the template:

Create the fw-allow-health-check firewall rule.

Now that the instances are up and running, set up a global static external IP address that your customers use to reach your load balancer:

Create a health check for the load balancer:


Create a backend service:

Add your instance group as the backend to the backend service:

Create a URL map to route the incoming requests to the default backend service:

Create a target HTTP proxy to route requests to your URL map:

Create a global forwarding rule to route incoming requests to the proxy:


*/


gcloud compute networks create nucleus-vpc --subnet-mode=auto


gcloud compute instances create $INSTANCE_NAME \
          --network nucleus-vpc \
          --zone $ZONE  \
          --machine-type e2-micro  \
          --image-family debian-10  \ #change to 11 from 10
          --image-project debian-cloud 




# Task 2. Set up an HTTP load balancer
# You will serve the site via nginx web servers, but you want to ensure that the environment is fault-tolerant. 
# Create an HTTP load balancer with a managed instance group of 2 nginx web servers. Use the following code to configure the web servers; the team will replace this with their own configuration later.





cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

gcloud compute networks create nucleus-vpc --subnet-mode=auto


# Task 2.1 : Create an instance template where the web server choice and starting it with a home page all configured via a startup script which also require virtual private network - refer #2.2 and #2.3
# Create an instance template. Don't use the default machine type. Make sure you specify e2-medium as the machine type and create the Global template.


gcloud compute instance-templates create web-server-template \
--metadata-from-file startup-script=startup.sh \
--network nucleus-vpc \
--machine-type e2-medium \
--region $ZONE
--global   #added this to make the template global
 
 
#    this is not needed i guess so commented gcloud compute target-pools create nginx-pool --region=$REGION
 
#Create a managed instance group based on the template.
gcloud compute instance-groups managed create web-server-group \
--base-instance-name web-server \
--size 2 \
--template web-server-template \
--region $REGION
 
#Create a firewall rule named as Firewall rule to allow traffic (80/tcp).
gcloud compute firewall-rules create $FIREWALL_NAME \
--allow tcp:80 \
--network nucleus-vpc
 
#Create a health check.
gcloud compute http-health-checks create http-basic-check

#Create a backend service and add your instance group as the backend to the backend service group with named port (http:80).
gcloud compute instance-groups managed \
set-named-ports web-server-group \
--named-ports http:80 \
--region $REGION
 
 
gcloud compute backend-services create web-server-backend \
--protocol HTTP \
--http-health-checks http-basic-check \
--global
 
 
gcloud compute backend-services add-backend web-server-backend \
--instance-group web-server-group \
--instance-group-region $REGION \
--global
 
 
gcloud compute url-maps create web-server-map \
--default-service web-server-backend
 
#Create a target HTTP proxy to route requests to your URL map
gcloud compute target-http-proxies create http-lb-proxy \
--url-map web-server-map
 
 
#Create a forwarding rule.
gcloud compute forwarding-rules create http-content-rule \
--global \
--target-http-proxy http-lb-proxy \
--ports 80
 
 
gcloud compute forwarding-rules create $FIREWALL_NAME \
--global \
--target-http-proxy http-lb-proxy \
--ports 80
gcloud compute forwarding-rules list